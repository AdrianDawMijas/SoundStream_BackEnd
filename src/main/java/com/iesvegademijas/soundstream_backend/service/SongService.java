package com.iesvegademijas.soundstream_backend.service;

import com.iesvegademijas.soundstream_backend.dto.SongDTO;
import com.iesvegademijas.soundstream_backend.model.*;
import com.iesvegademijas.soundstream_backend.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class SongService {
    private final SongRepository songRepository;
    private final GenreRepository genreRepository;
    private final SubgenreRepository subgenreRepository;
    private final InstrumentRepository instrumentRepository;
    private final UserRepository userRepository; // ðŸ†• Repositorio de usuarios

    @Autowired
    public SongService(SongRepository songRepository, GenreRepository genreRepository,
                       InstrumentRepository instrumentRepository, SubgenreRepository subgenreRepository,
                       UserRepository userRepository) { // ðŸ†• Pasamos el UserRepository
        this.songRepository = songRepository;
        this.genreRepository = genreRepository;
        this.subgenreRepository = subgenreRepository;
        this.instrumentRepository = instrumentRepository;
        this.userRepository = userRepository; // ðŸ†• Guardamos la referencia
    }

    // ðŸ”¹ Obtener una canciÃ³n por ID
    public Optional<Song> getSongById(Long id) {
        return songRepository.findById(id);
    }


    // ðŸ”¹ Guardar una canciÃ³n con usuario, gÃ©nero, subgÃ©nero e instrumentos
    public Song saveSong(SongDTO songDTO) {
        Song song = new Song();
        song.setDuration(songDTO.getDuration());
        song.setTempo(songDTO.getTempo());
        song.setPromptText(songDTO.getPromptText());
        song.setCreatedAt(java.time.LocalDateTime.now());

        // ðŸ”¹ Buscar al usuario en la BD (si no existe, lanza error)
        User user = userRepository.findById(songDTO.getUserId())
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));
        song.setUser(user); // âœ… Asignamos el usuario

        // ðŸ”¹ Buscar o crear el gÃ©nero
        song.setGenre(getOrCreateGenre(songDTO.getGenre()));

        // ðŸ”¹ Buscar o crear el subgÃ©nero (si existe)
        song.setSubgenre(getOrCreateSubgenre(songDTO.getSubgenre(), song.getGenre()));

        // ðŸ”¹ Convertir los instrumentos de String a Lista de entidades
        song.setInstruments(getOrCreateInstruments(songDTO.getInstrumentNames()));

        return songRepository.save(song);
    }

    // ðŸ”¹ MÃ©todo helper: Buscar o crear un gÃ©nero
    private Genre getOrCreateGenre(String genreName) {
        return genreRepository.findByNameIgnoreCase(genreName)
                .orElseGet(() -> genreRepository.save(new Genre(genreName)));
    }

    // ðŸ”¹ MÃ©todo helper: Buscar o crear un subgÃ©nero
    private Subgenre getOrCreateSubgenre(String subgenreName, Genre genre) {
        if (subgenreName == null || subgenreName.isEmpty()) return null;
        return subgenreRepository.findByNameIgnoreCase(subgenreName)
                .orElseGet(() -> subgenreRepository.save(new Subgenre(subgenreName, genre)));
    }

    // ðŸ”¹ MÃ©todo helper: Convertir los nombres de instrumentos en entidades
    private List<Instrument> getOrCreateInstruments(List<String> instrumentNames) {
        if (instrumentNames == null || instrumentNames.isEmpty()) return new ArrayList<>(); // âœ… Retornamos lista mutable

        List<Instrument> existingInstruments = instrumentRepository.findByNameIn(instrumentNames);

        return new ArrayList<>(instrumentNames.stream()
                .map(name -> existingInstruments.stream()
                        .filter(i -> i.getName().equalsIgnoreCase(name))
                        .findFirst()
                        .orElseGet(() -> instrumentRepository.save(new Instrument(name))))
                .toList()); // âœ… Convertimos a lista mutable
    }


    // ðŸ”¹ MÃ©todo helper: Crear una entidad Song desde un SongDTO
    public Song createSongFromDTO(SongDTO songDTO) {
        Song song = new Song();
        song.setDuration(songDTO.getDuration());
        song.setTempo(songDTO.getTempo());
        song.setPromptText(songDTO.getPromptText());
        song.setCreatedAt(java.time.LocalDateTime.now());

        // ðŸ”¹ Buscar o crear el gÃ©nero
        song.setGenre(getOrCreateGenre(songDTO.getGenre()));

        // ðŸ”¹ Buscar o crear el subgÃ©nero (si existe)
        song.setSubgenre(getOrCreateSubgenre(songDTO.getSubgenre(), song.getGenre()));

        // ðŸ”¹ Convertir los instrumentos de String a Lista de entidades
        song.setInstruments(getOrCreateInstruments(songDTO.getInstrumentNames()));

        return song;
    }

    // ðŸ”¹ Filtrar por mÃºltiples criterios dentro de una playlist
    public List<Song> getSongsByFilters(Long playlistId, Long genreId, Long subgenreId, Double minDuration,
                                        Double maxDuration, List<Long> instrumentIds) {
        return songRepository.findByFilters(playlistId, genreId, subgenreId, minDuration, maxDuration,
                (instrumentIds != null && !instrumentIds.isEmpty()) ? instrumentIds : null);
    }

    // ðŸ”¹ Eliminar una canciÃ³n con verificaciÃ³n
    public boolean deleteSong(Long id) {
        if (!songRepository.existsById(id)) {
            throw new RuntimeException("La canciÃ³n con ID " + id + " no existe.");
        }
        songRepository.deleteById(id);
        return true;
    }

}
